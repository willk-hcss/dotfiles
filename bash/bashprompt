#!/usr/bin/env bash

# Based on the Oh My Zsh Bullet Train theme (https://github.com/caiogondim/bullet-train-oh-my-zsh-theme)
# -and-
# The sexy bash prompt by twolfson (https://github.com/twolfson/sexy-bash-prompt)

if [[ $- == *i* ]]; then
    FG_BLACK=$(tput setaf 0)
    FG_RED=$(tput setaf 1)
    FG_GREEN=$(tput setaf 2)
    FG_YELLOW=$(tput setaf 3)
    FG_BLUE=$(tput setaf 4)
    FG_MAGENTA=$(tput setaf 5)
    FG_CYAN=$(tput setaf 6)
    FG_WHITE=$(tput setaf 7)
    BG_BLACK=$(tput setaf 0)
    BG_RED=$(tput setab 1)
    BG_GREEN=$(tput setab 2)
    BG_YELLOW=$(tput setab 3)
    BG_BLUE=$(tput setab 4)
    BG_MAGENTA=$(tput setab 5)
    BG_CYAN=$(tput setab 6)
    BG_WHITE=$(tput setab 7)
    BOLD=$(tput bold)
    BLINK=$(tput blink)
    REVERSE=$(tput smso)
    UNDERLINE=$(tput smul)
    RESET=$(tput sgr0)
    ERASE_PREVIOUS_TERMINATOR=$(tput cub 1)
fi

BP_TIME_COLOR="$FG_MAGENTA$BG_WHITE"
BP_USER_COLOR="$FG_BLACK$BG_WHITE"
BP_AT_SYMBOL_COLOR="$BOLD$FG_BLACK$BG_WHITE"
BP_DEVICE_COLOR="$FG_BLACK$BG_WHITE"
BP_HOST_TERMINATOR_COLOR="$FG_WHITE$BG_GREEN"
BP_DIR_COLOR="$FG_BLACK$BG_GREEN"
BP_DIR_WITHOUT_GIT_TERMINATOR_COLOR="$FG_GREEN"
BP_DIR_WITH_GIT_TERMINATOR_COLOR="$ERASE_PREVIOUS_TERMINATOR$FG_GREEN$BG_YELLOW"
BP_GIT_STATUS_COLOR="$FG_BLACK$BG_YELLOW"
BP_GIT_TERMINATOR_COLOR="$FG_YELLOW"
BP_GIT_PROGRESS_COLOR="$FG_RED"

BP_PROMPT_SYMBOL_COLOR="$BOLD" # BOLD

# Define the default prompt terminator character '$'
if [[ "$UID" == 0 ]]; then
  BP_PROMPT_SYMBOL="#"
else
  BP_PROMPT_SYMBOL="\$"
fi

# Apply any color overrides that have been set in the environment
if [[ -n "$PROMPT_TIME_COLOR" ]]; then BP_TIME_COLOR="$PROMPT_TIME_COLOR"; fi
if [[ -n "$PROMPT_USER_COLOR" ]]; then BP_USER_COLOR="$PROMPT_USER_COLOR"; fi
if [[ -n "$PROMPT_AT_SYMBOL_COLOR" ]]; then BP_AT_SYMBOL_COLOR="$PROMPT_AT_SYMBOL_COLOR"; fi
if [[ -n "$PROMPT_DEVICE_COLOR" ]]; then BP_DEVICE_COLOR="$PROMPT_DEVICE_COLOR"; fi
if [[ -n "$PROMPT_HOST_TERMINATOR_COLOR" ]]; then BP_HOST_TERMINATOR_COLOR="$PROMPT_HOST_TERMINATOR_COLOR"; fi
if [[ -n "$PROMPT_DIR_COLOR" ]]; then BP_DIR_COLOR="$PROMPT_DIR_COLOR"; fi
if [[ -n "$PROMPT_DIR_WITHOUT_GIT_TERMINATOR_COLOR" ]]; then BP_DIR_WITHOUT_GIT_TERMINATOR_COLOR="$PROMPT_DIR_WITHOUT_GIT_TERMINATOR_COLOR"; fi
if [[ -n "$PROMPT_DIR_WITH_GIT_TERMINATOR_COLOR" ]]; then BP_DIR_WITH_GIT_TERMINATOR_COLOR="$PROMPT_DIR_WITH_GIT_TERMINATOR_COLOR"; fi
if [[ -n "$PROMPT_GIT_STATUS_COLOR" ]]; then BP_GIT_STATUS_COLOR="$PROMPT_GIT_STATUS_COLOR"; fi
if [[ -n "$PROMPT_GIT_PROGRESS_COLOR" ]]; then BP_GIT_PROGRESS_COLOR="$PROMPT_GIT_PROGRESS_COLOR"; fi
if [[ -n "$PROMPT_SYMBOL" ]]; then BP_PROMPT_SYMBOL="$PROMPT_SYMBOL"; fi
if [[ -n "$PROMPT_SYMBOL_COLOR" ]]; then BP_PROMPT_SYMBOL_COLOR="$PROMPT_SYMBOL_COLOR"; fi

# Define the Git symbols
BP_GIT_SYNCED_SYMBOL="$BOLD$FG_GREEN✔"
BP_GIT_DIRTY_SYNCED_SYMBOL="$BOLD$FG_RED✹"
BP_GIT_UNPUSHED_SYMBOL="$BOLD$FG_MAGENTA↑"
BP_GIT_DIRTY_UNPUSHED_SYMBOL="$BOLD$FG_MAGENTA⇑"
BP_GIT_UNPULLED_SYMBOL="$BOLD$FG_BLUE↓"
BP_GIT_DIRTY_UNPUSHED_SYMBOL="$BOLD$FG_BLUE⇓"
BP_GIT_UNPUSHED_UNPULLED_SYMBOL="$FG_MAGENTA↑↓"
BP_GIT_DIRTY_UNPUSHED_UNPULLED_SYMBOL="$FG_MAGENTA⇑⇓"

# Apply symbol overrides that have been set in the environment
if [[ -n "$PROMPT_SYNCED_SYMBOL" ]]; then BP_GIT_SYNCED_SYMBOL="$PROMPT_SYNCED_SYMBOL"; fi
if [[ -n "$PROMPT_DIRTY_SYNCED_SYMBOL" ]]; then BP_GIT_DIRTY_SYNCED_SYMBOL="$PROMPT_DIRTY_SYNCED_SYMBOL"; fi
if [[ -n "$PROMPT_UNPUSHED_SYMBOL" ]]; then BP_GIT_UNPUSHED_SYMBOL="$PROMPT_UNPUSHED_SYMBOL"; fi
if [[ -n "$PROMPT_DIRTY_UNPUSHED_SYMBOL" ]]; then BP_GIT_DIRTY_UNPUSHED_SYMBOL="$PROMPT_DIRTY_UNPUSHED_SYMBOL"; fi
if [[ -n "$PROMPT_UNPULLED_SYMBOL" ]]; then BP_GIT_UNPULLED_SYMBOL="$PROMPT_UNPULLED_SYMBOL"; fi
if [[ -n "$PROMPT_DIRTY_UNPULLED_SYMBOL" ]]; then BP_GIT_DIRTY_UNPUSHED_SYMBOL="$PROMPT_DIRTY_UNPULLED_SYMBOL"; fi
if [[ -n "$PROMPT_UNPUSHED_UNPULLED_SYMBOL" ]]; then BP_GIT_UNPUSHED_UNPULLED_SYMBOL="$PROMPT_UNPUSHED_UNPULLED_SYMBOL"; fi
if [[ -n "$PROMPT_DIRTY_UNPUSHED_UNPULLED_SYMBOL" ]]; then BP_GIT_DIRTY_UNPUSHED_UNPULLED_SYMBOL="$PROMPT_DIRTY_UNPUSHED_UNPULLED_SYMBOL"; fi

function sexy_bash_prompt_get_git_branch() {
  # On branches, this will return the branch name. On non-branches, it will return (no branch).
  ref="$(git symbolic-ref HEAD 2> /dev/null | sed -e 's/refs\/heads\///')"
  if [[ "$ref" != "" ]]; then
    echo "$ref"
  else
    echo "(no branch)"
  fi
}

function sexy_bash_prompt_get_git_progress() {
  # Detect in-progress actions (e.g. merge, rebase)
  # https://github.com/git/git/blob/v1.9-rc2/wt-status.c#L1199-L1241
  git_dir="$(git rev-parse --git-dir)"

  # git merge
  if [[ -f "$git_dir/MERGE_HEAD" ]]; then
    echo " [merge]"
  elif [[ -d "$git_dir/rebase-apply" ]]; then
    # git am
    if [[ -f "$git_dir/rebase-apply/applying" ]]; then
      echo " [am]"
    # git rebase
    else
      echo " [rebase]"
    fi
  elif [[ -d "$git_dir/rebase-merge" ]]; then
    # git rebase --interactive/--merge
    echo " [rebase]"
  elif [[ -f "$git_dir/CHERRY_PICK_HEAD" ]]; then
    # git cherry-pick
    echo " [cherry-pick]"
  fi
  if [[ -f "$git_dir/BISECT_LOG" ]]; then
    # git bisect
    echo " [bisect]"
  fi
  if [[ -f "$git_dir/REVERT_HEAD" ]]; then
    # git revert --no-commit
    echo " [revert]"
  fi
}

sexy_bash_prompt_is_branch1_behind_branch2 () {
  # $ git log origin/master..master -1
  # commit 4a633f715caf26f6e9495198f89bba20f3402a32
  # Author: Todd Wolfson <todd@twolfson.com>
  # Date:   Sun Jul 7 22:12:17 2013 -0700
  #
  #     Unsynced commit

  # Find the first log (if any) that is in branch1 but not branch2
  first_log="$(git log $1..$2 -1 2> /dev/null)"

  # Exit with 0 if there is a first log, 1 if there is not
  [[ -n "$first_log" ]]
}

sexy_bash_prompt_branch_exists () {
  # List remote branches           | # Find our branch and exit with 0 or 1 if found/not found
  git branch --remote 2> /dev/null | grep --quiet "$1"
}

sexy_bash_prompt_parse_git_ahead () {
  # Grab the local and remote branch
  branch="$(sexy_bash_prompt_get_git_branch)"
  remote_branch="origin/$branch"

  # $ git log origin/master..master
  # commit 4a633f715caf26f6e9495198f89bba20f3402a32
  # Author: Todd Wolfson <todd@twolfson.com>
  # Date:   Sun Jul 7 22:12:17 2013 -0700
  #
  #     Unsynced commit

  # If the remote branch is behind the local branch
  # or it has not been merged into origin (remote branch doesn't exist)
  if (sexy_bash_prompt_is_branch1_behind_branch2 "$remote_branch" "$branch" ||
      ! sexy_bash_prompt_branch_exists "$remote_branch"); then
    # echo our character
    echo 1
  fi
}

sexy_bash_prompt_parse_git_behind () {
  # Grab the branch
  branch="$(sexy_bash_prompt_get_git_branch)"
  remote_branch="origin/$branch"

  # $ git log master..origin/master
  # commit 4a633f715caf26f6e9495198f89bba20f3402a32
  # Author: Todd Wolfson <todd@twolfson.com>
  # Date:   Sun Jul 7 22:12:17 2013 -0700
  #
  #     Unsynced commit

  # If the local branch is behind the remote branch
  if sexy_bash_prompt_is_branch1_behind_branch2 "$branch" "$remote_branch"; then
    # echo our character
    echo 1
  fi
}

function sexy_bash_prompt_parse_git_dirty() {
  # If the git status has *any* changes (e.g. dirty), echo our character
  if [[ -n "$(git status --porcelain 2> /dev/null)" ]]; then
    echo 1
  fi
}

function sexy_bash_prompt_is_on_git() {
  git rev-parse 2> /dev/null
}

function sexy_bash_prompt_get_git_status() {
  # Grab the git dirty and git behind
  dirty_branch="$(sexy_bash_prompt_parse_git_dirty)"
  branch_ahead="$(sexy_bash_prompt_parse_git_ahead)"
  branch_behind="$(sexy_bash_prompt_parse_git_behind)"

  # Iterate through all the cases and if it matches, then echo
  if [[ "$dirty_branch" == 1 && "$branch_ahead" == 1 && "$branch_behind" == 1 ]]; then
    echo "$BP_GIT_DIRTY_UNPUSHED_UNPULLED_SYMBOL"
  elif [[ "$branch_ahead" == 1 && "$branch_behind" == 1 ]]; then
    echo "$BP_GIT_UNPUSHED_UNPULLED_SYMBOL"
  elif [[ "$dirty_branch" == 1 && "$branch_ahead" == 1 ]]; then
    echo "$BP_GIT_DIRTY_UNPUSHED_SYMBOL"
  elif [[ "$branch_ahead" == 1 ]]; then
    echo "$BP_GIT_UNPUSHED_SYMBOL"
  elif [[ "$dirty_branch" == 1 && "$branch_behind" == 1 ]]; then
    echo "$BP_GIT_DIRTY_UNPUSHED_SYMBOL"
  elif [[ "$branch_behind" == 1 ]]; then
    echo "$BP_GIT_UNPULLED_SYMBOL"
  elif [[ "$dirty_branch" == 1 ]]; then
    echo "$BP_GIT_DIRTY_SYNCED_SYMBOL"
  else # clean
    echo "$BP_GIT_SYNCED_SYMBOL"
  fi
}

sexy_bash_prompt_get_git_info () {
  # Grab the branch
  branch="$(sexy_bash_prompt_get_git_branch)"

  # If there are any branches
  if [[ "$branch" != "" ]]; then
    # Echo the branch
    output="$branch"

    # Add on the git status
    output="$output $(sexy_bash_prompt_get_git_status)$BP_GIT_STATUS_COLOR"

    # Echo our output
    echo "$output"
  fi
}

# Finally! Set the damn prompt
PS1=''$'\n\[$BP_USER_COLOR\] \u\[$RESET\]\
\[$BP_AT_SYMBOL_COLOR\]@\[$RESET\]\
\[$BP_DEVICE_COLOR\]\h \[$RESET\]\
\[$BP_TIME_COLOR\]\T \[$RESET\]\
\[$BP_HOST_TERMINATOR_COLOR\]\[$RESET\]\
\[$BP_DIR_COLOR\] \w \[$RESET\]\
\[$BP_DIR_WITHOUT_GIT_TERMINATOR_COLOR\]\[$RESET\]\
$(sexy_bash_prompt_is_on_git && \
echo -n "\[$BP_DIR_WITH_GIT_TERMINATOR_COLOR\]\[$RESET\]\[$BP_GIT_STATUS_COLOR\]  $(sexy_bash_prompt_get_git_info)" && \
echo -n "\[$BP_GIT_PROGRESS_COLOR\]$(sexy_bash_prompt_get_git_progress)" && \
echo -n "\[$RESET\]\[$BP_GIT_TERMINATOR_COLOR\]\[$RESET\]") \
'$'\n\[$BP_PROMPT_SYMBOL_COLOR\]$BP_PROMPT_SYMBOL \[$RESET\]'
